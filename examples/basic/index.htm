<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

        <title>Babylon.js sample code</title>

        <!-- Babylon.js -->
        <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js"></script>-->
        <script src="https://assets.babylonjs.com/generated/Assets.js"></script>
        <script src="https://cdn.babylonjs.com/recast.js"></script>
        <!--<script src="https://cdn.babylonjs.com/ammo.js"></script>
        <script src="https://cdn.babylonjs.com/havok/HavokPhysics_umd.js"></script>
        <script src="https://cdn.babylonjs.com/cannon.js"></script>
        <script src="https://cdn.babylonjs.com/Oimo.js"></script>
        <script src="https://cdn.babylonjs.com/earcut.min.js"></script>-->
        <script src="https://cdn.babylonjs.com/babylon.js"></script>
        <script src="https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.min.js"></script>
        <script src="https://cdn.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"></script>
        <script src="https://cdn.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js"></script>
        <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.js"></script>
        <script src="https://cdn.babylonjs.com/serializers/babylonjs.serializers.min.js"></script>
        <script src="https://cdn.babylonjs.com/gui/babylon.gui.min.js"></script>
        <script src="https://cdn.babylonjs.com/inspector/babylon.inspector.bundle.js"></script>
        <script src="https://code.jquery.com/pep/0.4.2/pep.js"></script>
        <script src="EditControl.js"></script>

        <style>
            * {
                user-select:none;
            }
            html, body {
                overflow: hidden;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
                user-select:none;
                touch-action: none;
            }
            a {
              color: white;
            }
            #renderCanvas {
                width: 100%;
                height: 100%;
                user-select:none;
                touch-action: none;
            }
            
            #canvasZone {
                width: 100%;
                height: 100%;
            }
            #box {
              position:absolute;
              bottom:0;
              left:0;
              width:300px;
              height:256px;
              overflow-x:visible;
              overflow-y:scroll;
            }
            input[type=range] {
              width:128px;
              height:1em;
            }
            label {
              font-family:monospace;
            }
            #x {
                font-family:monospace;
                font-weight:bold;
                position:fixed;
                line-height:20px;
                font-size:16px;
                right:20px;
                top:0;
            }
	#compass_box {
	  top:1.5em;
	  right:3px;
	  position: fixed;
	  border:1px dashed gray;
	  border-radius: 50%;
	  width:1.5em;
	  height:1.5em;
	  padding:0;
	  margin:0;
	}
	#compass {
	  position:absolute;
	  top:-1px;
	  left:-1px;
	  transform:rotate(0deg);
	  border:1px solid black;
	  border-radius: 50%;
	  width:100%;
	  height:100%;
	  padding:0;
	  margin:0;
	  line-height:1.45em;
	  letter-spacing:0;
	}
    #compass b {
      margin-top:-1px;
    }
    #video {
      display:none;
    }
    textarea {
        font-size:16px;
        line-height:1em;
        white-space:pre;
        border:0;
        margin:0;
        padding:0;
        height:64px;
        float:left;
        display:inline-block;
    }
    #times {
        width:33vw;
    }            
    #subs {
        width:67vw;
    }
    #subs_c {
        width:100vw;
    }
        </style>
    </head>
<body oncontextmenu="return false;" onselect="event.preventDefault();">
    <div id="canvasZone"><canvas id="renderCanvas"></canvas></div>
    <video id="video" src="" autoplay="false"></video>
    
<div id='box'>
<div id='cdata'></div>
<div><label for='zoom'>Zoom &nbsp; &nbsp;</label><input id='zoom' type='range' value='0.8' min='0.157' max='1.57' step='0.001'/><span>0.8</span></div>
<div><label for='exposure'>Exposure</label><input id='exposure' type='range' value='1.0' min='0' max='2' step='0.001'/><span>1.0</span></div>
<div><label for='contrast'>Contrast</label><input id='contrast' type='range' value='1.0' min='0' max='2' step='0.001'/><span>1.0</span></div>

<input type='text' id='coords' value='[{"lat": 50.07379596793083, "lng": 14.437146122950555, "heading": 152.70303, "pitch": 2.607833999999997}, {"lat": 50.073799567020004, "lng": 14.437146774240507, "heading": 151.12973, "pitch": 2.8672300000000064}, {"lat": 50.07377647505558, "lng": 14.437161000659017, "heading": 151.41025, "pitch": 3.4802200000000028}, {"lat": 50.07379496839027, "lng": 14.437148958238538, "heading": 151.93391, "pitch": 2.843050000000005}, {"lat": 50.073823157821664, "lng": 14.437124189538856, "heading": 152.95769, "pitch": 4.233024999999998}]'/>
<input type='text' id='order' value='0'/>
<input type='text' id='bgcolor' value='[255, 255, 255, 255]'/>
<input type='text' id='bgimage' value='https://huggingface.co/spaces/freealise/Depth-Anything-Video/resolve/main/f0.jpg,'/>
<input type='text' id='bgdepth' value='https://huggingface.co/spaces/freealise/Depth-Anything-Video/resolve/main/f0_dmap.jpg,'/>
<input type='text' id='fgvideo' value='https://raw.githubusercontent.com/freealise/freealise/refs/heads/main/movie.mp4'/>
<input type='text' id='fgdepth' value='https://raw.githubusercontent.com/freealise/freealise/refs/heads/main/movie.mp4'/>
<br/>
#<select id='fnum' oninput='attach_control();' onselect='attach_control();'><option selected value='0'>0</option></select>
mode<select id='c_mode' oninput='control_mode(this.value);' onselect='control_mode(this.value);'>
    <option selected value='move'>move</option>
    <option value='rotate'>rotate</option>
    <option value='scale'>scale</option>
    <option value='-'>-</option>
</select><br/>
<a href='#' id='reset_cam' onclick='reset_cam();'>reset camera</a>
<a href='#' id='origin_cam' onclick='origin_cam();'>camera to origin</a>
<a href='#' id='optimize' onclick='optimize();'>optimize</a><br/>

<a href='#' onclick='if(!scene.debugLayer.isVisible()){scene.debugLayer.show();}else{scene.debugLayer.hide();}'>inspector</a>
<a href='#' id='play'>play</a>
<a href='#' onclick='record_video();'>record</a>
<a href='#' onclick='stop_recording();'>stop</a>
<a href='#' onclick='snapshot();'>snapshot</a><br/>
<img src='' id='img_out' onload='var ctxt = document.getElementById("cnv_out").getContext("2d");ctxt.drawImage(this, 0, 0);'/><br/>
<canvas id='cnv_out'></canvas>
<div id='subs_c'><textarea id="times" onscroll="scrollSubs(true);"></textarea><textarea id="subs" onscroll="scrollSubs(false);">line0

line1

line2

line3
</textarea></div>
<button id="add_times" onclick="addTimes();">add</button><a id="subs_link" href=""></a>
</div>
<a href='#' id="x" onclick='if(document.getElementById("box").style.display!="none"){document.getElementById("box").style.display="none";}else{document.getElementById("box").style.display="block";}'>[x]</a><br/>
<div id="compass_box"><div id="compass"><b style="color:blue;">‚óÖ</b>ùç†<b style="color:red;">‚ñª</b></div></div>
    <script>
        var canvas = document.getElementById("renderCanvas");
        var video = document.getElementById("video");
        var compass = document.getElementById("compass");
        var times = document.getElementById("times");
        var subs = document.getElementById("subs");
        var subs_link = document.getElementById("subs_link");
        var screenshot = false;
        
        var avg = [];
        var avg_all = 0;
        var avg_old = 0;
        var start = Date.now();
        var d = new Date(start);
        const o = d.getTimezoneOffset()*60*1000;
        var t_old = 0;
        var time_old = '00:00:00.000';
        subs.value = 'WEBVTT\n\n' + subs.value;

        var then = new Date().getTime();
        var now, delta;
        const interval = 1000 / 25;
        const tolerance = 0.1;

        var startRenderLoop = function (engine, canvas) {
            engine.runRenderLoop(function () {
                now = new Date().getTime();
                delta = now - then;
                then = now - (delta % interval);
                if (delta >= interval - tolerance && sceneToRender && sceneToRender.activeCamera) {
                    sceneToRender.render();
                }
            });
        }

        var engine = null;
        var scene = null;
        var sceneToRender = null;
        var pipeline = null;
        var editControl = null;
        var camera, recorder, ac, mediaStreamDestination;
        var r_old = 1.0;
        var a_old = 0;
        var b_old = Math.PI / 2;
        var md = false;
        var videoDome, ctx, buffer, music;
        
        var createDefaultEngine = function() { return new BABYLON.Engine(canvas, true, { preserveDrawingBuffer: true, stencil: true,  disableWebGL2Support: false}, true); }; //adapt to device ratio
        class Playground {
            static CreateScene(engine, canvas) {
                // This creates a basic Babylon Scene object (non-mesh)
                var scene = new BABYLON.Scene(engine);
                camera = new BABYLON.ArcRotateCamera("camera", 0, Math.PI / 2, 1.0, new BABYLON.Vector3(0, 0, 0));
                // This attaches the camera to the canvas
                camera.attachControl(canvas, true);
                camera.inertia = 0.0;
                //pan
                camera.panningInertia = 0.0;
                camera.panningDistanceLimit = 16;
                camera.panningSensibility = 16;
                //zoom
                camera.pinchDeltaPercentage = 1/256;
                camera.wheelDeltaPercentage = 1/256;
                camera.upperRadiusLimit = 1.57 / 0.8;
                camera.lowerRadiusLimit = 0.157 / 0.8;
                
                //camera.inputs.attached.mousewheel.detachControl(canvas);
                
                if (location.href.split("?file=")[1]) {
                    var path = location.href.split("?file=")[1];
                    var fln = path.slice(path.lastIndexOf("/")+1);
                    var url = "https://freealise-depth-anything-video.hf.space/file=" + path.slice(0, path.lastIndexOf("/")+1); 
                } else {
                    var fln = "TriangleWithoutIndices.gltf";
                    var url = "https://huggingface.co/spaces/freealise/Depth-Anything-Video/resolve/main/"; 
                }

BABYLON.SceneLoader.Append(url, fln, scene, function (scene) {
try {
  engine.setHardwareScalingLevel(1.0);
  var bg = JSON.parse(document.getElementById("bgcolor").value);
  for (var i=0; i<bg.length; i++) {
    bg[i] /= 255;
  }
  scene.clearColor = new BABYLON.Color4(bg[0], bg[1], bg[2], bg[3]);
  //scene.autoClear = false;
  //scene.autoClearDepthAndStencil = false;
  scene.getAnimationRatio();

  var order = document.getElementById("order").value.split(",");
  var coords = JSON.parse(document.getElementById("coords").value);

  var bgi = document.getElementById("bgimage").value.slice(0,-1).split(",");
  var bgd = document.getElementById("bgdepth").value.slice(0,-1).split(",");
  document.getElementById("fnum").max = bgi.length-1;
  var dome = [];
  for (var j=0; j<bgi.length; j++) {
    dome[j] = new BABYLON.PhotoDome("dome"+j, bgi[j], 
      {
        resolution: 16,
        size: 512
      }, scene);
    var q = scene.meshes[scene.meshes.length-2]._children;
    for (i = 0; i < q.length; i++) {
      let mesh = q[i];
      mesh.dispose(false, true);
    }
    scene.meshes[scene.meshes.length-1].applyDisplacementMap(bgd[j], 0, 255, null, null, null, true, function(e){alert(e);});
    scene.meshes[scene.meshes.length-1].name = "dome"+j;
    //material.forceDepthWrite
    //scene.meshes[scene.meshes.length-1].material.needDepthPrePass = true;
    scene.meshes[scene.meshes.length-1].alphaIndex = bgi.length-j;
    scene.meshes[scene.meshes.length-1].material.diffuseTexture.hasAlpha = true;
    scene.meshes[scene.meshes.length-1].material.useAlphaFromDiffuseTexture = true;
  }
  
  var j=0;
  for (var i=0; i<scene.meshes.length; i++) {
    if (scene.meshes[i].name.indexOf("dome") == 0) {
      if (j==0) {
        document.getElementById("fnum").innerHTML = '<option value="' + i + '">' + j + '</option>';
        document.getElementById("fnum").value = i;
      } else {
        document.getElementById("fnum").innerHTML += '<option value="' + i + '">' + j + '</option>';
      }
      scene.meshes[i].rotationQuaternion = null;
      scene.meshes[i].material.pointSize = Math.ceil(Math.sqrt(2)*Math.log2(Math.PI/document.getElementById("zoom").value));
      scene.meshes[i].position.z = coords[parseInt(order[j])].lat;
      scene.meshes[i].position.x = coords[parseInt(order[j])].lng;
      scene.meshes[i].rotation.y = coords[parseInt(order[j])].heading / 180 * Math.PI;
      scene.meshes[i].rotation.z = -coords[parseInt(order[j])].pitch / 180 * Math.PI;
      j++;
    }
    //alert(scene.meshes[i].name + ' z: ' + scene.meshes[i].rotation.z + ' x: ' + scene.meshes[i].rotation.x);
  }
  var l_axes = new BABYLON.Debug.AxesViewer(scene, 2);
  l_axes.xAxis.parent = scene.meshes[parseInt(document.getElementById("fnum").value)];
  l_axes.yAxis.parent = scene.meshes[parseInt(document.getElementById("fnum").value)];
  l_axes.zAxis.parent = scene.meshes[parseInt(document.getElementById("fnum").value)];
  
  var axes = new BABYLON.Debug.AxesViewer(scene, 4);
  var CoT = new BABYLON.TransformNode("root");
  CoT.rotationQuaternion = null;
  axes.parent = CoT;

  pipeline = new BABYLON.DefaultRenderingPipeline("default", true, BABYLON.Engine.LastCreatedScene, [BABYLON.Engine.LastCreatedScene.activeCamera]);
  pipeline.samples = 4;
  pipeline.imageProcessing.contrast = document.getElementById("contrast").value;
  pipeline.imageProcessing.exposure = document.getElementById("exposure").value;

  BABYLON.Engine.LastCreatedScene.activeCamera.fov = document.getElementById("zoom").value;
  
  document.getElementById("renderCanvas").style.filter = "blur(" + BABYLON.Engine.LastCreatedScene.meshes[parseInt(document.getElementById("fnum").value)].material.pointSize/2.0 + "px)";
  document.getElementById("renderCanvas").oncontextmenu = function(e){e.preventDefault();}
  document.getElementById("renderCanvas").ondrag = function(e){e.preventDefault();}

            video.crossOrigin = "anonymous";
            video.src = document.getElementById("fgdepth").value;
            video.muted = true;
            video.loop = true;
            video.oncanplaythrough = function () {
                alert('depth loaded');
                
                var videoMat = new BABYLON.CustomMaterial("video material", scene);
                //videoMat.disableLighting = true;
                videoMat.Fragment_Before_FragColor(`  
vec3 chromaKey = vec3(1.0, 1.0, 1.0);
vec3 blend = vec3(0.02);
vec3 limitMin = vec3(chromaKey-blend); 
vec3 limitMax = vec3(chromaKey+blend);
limitMin.r = max(limitMin.r, 0.0);
limitMin.g = max(limitMin.g, 0.0);
limitMin.b = max(limitMin.b, 0.0);
limitMax.r = min(limitMax.r, 1.0);
limitMax.g = min(limitMax.g, 1.0);
limitMax.b = min(limitMax.b, 1.0);

function lerp(y1, y2, mu) { return y1*(1-mu)+y2*mu; }

if (
    ((color.r >= limitMin.r) && (color.r <= limitMax.r)) &&
    ((color.g >= limitMin.g) && (color.g <= limitMax.g)) &&
    ((color.b >= limitMin.b) && (color.b <= limitMax.b))
) {
    if (color.r == chromaKey.r && color.g == chromaKey.g && color.b == chromaKey.b && color.a == 1.0){
        discard;
    } else {
        highp float rold = chromaKey.r-blend.r;
        highp float rnew = chromaKey.r;
        highp float r = color.r;
        
        highp float gold = chromaKey.g-blend.g;
        highp float gnew = chromaKey.g;
        highp float g = color.g;
        
        highp float bold = chromaKey.b-blend.b;
        highp float bnew = chromaKey.b;
        highp float b = color.b;
        
        color.a = (
            lerp( 1.0, 0.0, (r-rold)/(rnew-rold) ) + 
            lerp( 1.0, 0.0, (g-gold)/(gnew-gold) ) + 
            lerp( 1.0, 0.0, (b-bold)/(bnew-bold) )
        ) / 3.0;
    }
} else {
    color.a = 1.0;
}
`);
                
                videoDome = new BABYLON.VideoDome(
                    "videoDome",
                    [document.getElementById("fgvideo").value],
                    {
                        resolution: 32,
                        size: 16,
                        clickToPlay: false,
                        autoPlay: false,
                        poster: 'https://freeali.se/assets/images/1x1.png',
                    }, scene
                );
                var q = scene.meshes[scene.meshes.length-2]._children;
                    for (i = 0; i < q.length; i++) {
                    let mesh = q[i];
                    mesh.dispose(false, true);
                }
                videoMat.emissiveTexture = videoDome.videoTexture;
                videoMat.emissiveTexture.hasAlpha = true;
                videoMat.useAlphaFromEmissiveTexture = true;
                scene.meshes[scene.meshes.length-1].material = videoMat;
                scene.meshes[scene.meshes.length-1].alphaIndex = 1;
                scene.meshes[scene.meshes.length-1].visibility = 0.9999;
                
                document.getElementById("fnum").innerHTML += '<option selected value="' + (scene.meshes.length-1) + '">video</option>';
                editControl = new EditControl(scene.meshes[parseInt(document.getElementById("fnum").value)], camera, canvas, 1.0, true, 0.02);
                editControl.enableTranslation();
                
                videoDome.videoTexture.video.muted = true;
                videoDome.videoTexture.video.loop = true;
                videoDome.videoTexture.video.oncanplaythrough = function () {
                    alert('video loaded');
                    //BABYLON.Engine.audioEngine.useCustomUnlockedButton = true;
                    
                    document.getElementById('play').addEventListener('click', function() {
                        try {
                        music = new BABYLON.Sound("Soundtrack", "https://raw.githubusercontent.com/freealise/freealise.github.io/refs/heads/master/assets/mp3/nightingale_bird.mp3", scene, function(){
                            if (!BABYLON.Engine.audioEngine.unlocked) {
                                BABYLON.Engine.audioEngine.unlock();
                            }
                            ac = BABYLON.Engine.audioEngine.audioContext;
                            mediaStreamDestination = ac.createMediaStreamDestination();
                            //music.connectToSoundTrackAudioNode(mediaStreamDestination);
                            BABYLON.Engine.audioEngine.masterGain.connect(mediaStreamDestination);
        
                            videoDome.videoTexture.video.play();
                            video.play();
                            music.play();
                        }, {
                          loop: true,
                          autoplay: false,
                          spatialSound: true,
                        });
                        var ST = new BABYLON.TransformNode("ST");
                        ST.rotationQuaternion = null;
                        ST.position.x = 0;
                        ST.position.y = 0;
                        ST.position.z = 0;
                        const direction = new BABYLON.Vector3(0, 0, -1);
                        music.attachToMesh(ST);
                        music.setDirectionalCone(45, 90, 0);
                        music.setLocalDirectionToMesh(direction);
                        
                        music.onEndedObservable.add(function() {
                            setTime(j-1);
                            avg_all /= j;
                        });
        
        	            var analyser = new BABYLON.Analyser(scene);
        	            BABYLON.Engine.audioEngine.connectToAnalyser(analyser);
                        analyser.FFT_SIZE = 1024;
        	            analyser.SMOOTHING = 0.0;
                        analyser.DEBUGCANVASSIZE.width = 512;
                        analyser.DEBUGCANVASSIZE.height = 100;
                        analyser.DEBUGCANVASPOS.x = 0;
                        analyser.DEBUGCANVASPOS.y = 0;
                        analyser.drawDebugCanvas();

                        var j = 0;
                        start = Date.now();
                        scene.registerBeforeRender(function () {
        	                var workingArray = analyser.getByteFrequencyData();
                            avg[j] = 0;

                            for (var i = 0; i < analyser.getFrequencyBinCount(); i++) {
                                avg[j] += workingArray[i];
        	                 }
                            avg[j] = parseInt(avg[j] / analyser.getFrequencyBinCount());
                            avg_all += avg[j];
             
                            if (j>0 && avg[j] / avg[j-1] >= 2 && avg_old != j-1) {
                                setTime(j);
                                times.scrollBy(0, 32);
                                subs.scrollTo(0, times.scrollTop);
                            }
                            j++;
                    	 });
                        
                        } catch(e) {alert(e);}
                    }, { once: true });
                    videoDome.videoTexture.video.oncanplaythrough = null;
                };
                video.oncanplaythrough = null;
            };
} catch(e) {alert(e);}
});
                alert('scene loaded');
                return scene;
            }
        }
        createScene = function() { return Playground.CreateScene(engine, engine.getRenderingCanvas()); }
                window.initFunction = async function() {
                    
                    var asyncEngineCreation = async function() {
                        try {
                        return createDefaultEngine();
                        } catch(e) {
                        console.log("the available createEngine function failed. Creating the default engine instead");
                        return createDefaultEngine();
                        }
                    }

                    window.engine = await asyncEngineCreation();
        if (!engine) throw 'engine should not be null.';
        startRenderLoop(engine, canvas);
window.scene = createScene();};
        initFunction().then(() => {sceneToRender = scene                    
        });

        // Resize
        window.addEventListener("resize", function () {
            engine.resize();
        });


document.getElementById('zoom').addEventListener('input', function(event){
try {
    for (var i=0; i<BABYLON.Engine.LastCreatedScene.meshes.length; i++) {
        if (BABYLON.Engine.LastCreatedScene.meshes[i].material && BABYLON.Engine.LastCreatedScene.meshes[i].material.pointSize) {
              BABYLON.Engine.LastCreatedScene.meshes[i].material.pointSize = Math.ceil(Math.sqrt(2)*Math.log2(Math.PI/event.target.value));
        }
    }
    BABYLON.Engine.LastCreatedScene.activeCamera.fov = event.target.value;
    event.target.parentNode.childNodes[2].innerText = BABYLON.Engine.LastCreatedScene.activeCamera.fov;
    document.getElementById("renderCanvas").style.filter = "blur(" + Math.ceil(Math.sqrt(2)*Math.log2(Math.PI/event.target.value)/2.0) + "px)";
} catch(e) {alert(e)}
});

document.getElementById('exposure').addEventListener('input', function(event) {
    pipeline.imageProcessing.exposure = event.target.value;
    event.target.parentNode.childNodes[2].innerText = pipeline.imageProcessing.exposure;
});

document.getElementById('contrast').addEventListener('input', function(event) {
    pipeline.imageProcessing.contrast = event.target.value;
    event.target.parentNode.childNodes[2].innerText = pipeline.imageProcessing.contrast;
});


function attach_control() {
try {
  editControl.switchTo(scene.meshes[parseInt(document.getElementById("fnum").value)], true);
} catch(e) {alert(e);}
}


function control_mode(m) {
  if (m == 'move') {
    editControl.show();
    editControl.enableTranslation();
    
    editControl.disableRotation();
    editControl.disableScaling();
  } else if (m == 'rotate') {
    editControl.show();
    editControl.enableRotation();
    editControl.setRotGuideFull(false) //This makes the rotation guides 360 degree(true) or 90 degree(false) .90 degree  looks less cluttered.
    editControl.returnEuler(true); // Optional. This will return rotation in euler instead of quaternion. Quaternion is the default.

    editControl.disableTranslation();
    editControl.disableScaling();
  } else if (m == 'scale') {
    editControl.show();
    editControl.enableScaling();
    
    editControl.disableTranslation();
    editControl.disableRotation();
  } else {
    editControl.disableTranslation();
    editControl.disableRotation();
    editControl.disableScaling();
    editControl.hide();
  }
}


function origin_cam() {
    reset_cam();
    BABYLON.Engine.LastCreatedScene.activeCamera.position.x = BABYLON.Engine.LastCreatedScene.meshes[parseInt(document.getElementById("fnum").value)].position.x;
    BABYLON.Engine.LastCreatedScene.activeCamera.position.y = BABYLON.Engine.LastCreatedScene.meshes[parseInt(document.getElementById("fnum").value)].position.y;
    BABYLON.Engine.LastCreatedScene.activeCamera.position.z = BABYLON.Engine.LastCreatedScene.meshes[parseInt(document.getElementById("fnum").value)].position.z;
    BABYLON.Engine.LastCreatedScene.activeCamera.rebuildAnglesAndRadius();
}


function reset_cam() {
    BABYLON.Engine.LastCreatedScene.activeCamera.radius = 0;
    BABYLON.Engine.LastCreatedScene.activeCamera.alpha = 0;
    BABYLON.Engine.LastCreatedScene.activeCamera.beta = Math.PI / 2;
}


document.getElementById('renderCanvas').addEventListener('pointermove', function() {
  if (md === true) {
    if (Math.abs(BABYLON.Engine.LastCreatedScene.activeCamera.radius - r_old) > 1/16) {
        BABYLON.Engine.LastCreatedScene.activeCamera.radius = r_old;
    } else {
        r_old = BABYLON.Engine.LastCreatedScene.activeCamera.radius;
    }
    BABYLON.Engine.LastCreatedScene.activeCamera.fov = 0.8 * BABYLON.Engine.LastCreatedScene.activeCamera.radius;
    
    if (BABYLON.Engine.LastCreatedScene.activeCamera.fov < 0.157) {
        BABYLON.Engine.LastCreatedScene.activeCamera.fov = 0.157;
    } else if (BABYLON.Engine.LastCreatedScene.activeCamera.fov > 1.57) {
        BABYLON.Engine.LastCreatedScene.activeCamera.fov = 1.57;
    }
    document.getElementById('zoom').value = BABYLON.Engine.LastCreatedScene.activeCamera.fov;
    document.getElementById('zoom').parentNode.childNodes[2].innerText = document.getElementById('zoom').value;
    
    try { compass.style.transform = "rotateX(" + (BABYLON.Engine.LastCreatedScene.activeCamera.beta-Math.PI/2) + "rad) rotateZ(" + BABYLON.Engine.LastCreatedScene.activeCamera.alpha + "rad)";
    document.getElementById("cdata").innerHTML = compass.style.transform + '<br/>radius: ' + BABYLON.Engine.LastCreatedScene.activeCamera.radius + ',<br/> heading: ' + BABYLON.Engine.LastCreatedScene.activeCamera.alpha + ',<br/> pitch: ' + BABYLON.Engine.LastCreatedScene.activeCamera.beta + ',<br/> x: ' + BABYLON.Engine.LastCreatedScene.activeCamera.position.x + ',<br/> y: ' + BABYLON.Engine.LastCreatedScene.activeCamera.position.y + ',<br/> z: ' + BABYLON.Engine.LastCreatedScene.activeCamera.position.z + '<hr/>';
    } catch(e) {alert(e);}
  }
});
document.getElementById('renderCanvas').addEventListener('pointerdown', function() {
  md = true;
});
document.getElementById('renderCanvas').addEventListener('pointerup', function() {
  md = false;
});
document.getElementById('renderCanvas').addEventListener('pointerleave', function() {
  md = false;
});


video.addEventListener("playing", function () {
  const canvas = document.createElement("canvas");
  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;
  ctx = canvas.getContext("2d", { willReadFrequently: true });

  updateMap();
});


function requestMap() {
  ctx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
  if (buffer) {
    applyDisplacementMapFromBuffer(sceneToRender.meshes[sceneToRender.meshes.length-1], buffer, video.videoWidth, video.videoHeight, 0, -1, null, null, true);
  }
  buffer = ctx.getImageData(0, 0, video.videoWidth, video.videoHeight).data;
  applyDisplacementMapFromBuffer(sceneToRender.meshes[sceneToRender.meshes.length-1], buffer, video.videoWidth, video.videoHeight, 0, 1, null, null, true);
  setTimeout(updateMap, 40);
}


function updateMap() {
  requestAnimationFrame(requestMap);
}


function applyDisplacementMapFromBuffer(
        mesh,
        buffer,
        heightMapWidth,
        heightMapHeight,
        minHeight,
        maxHeight,
        uvOffset,
        uvScale,
        forceUpdate
    ) {
        if (!mesh.isVerticesDataPresent(BABYLON.VertexBuffer.PositionKind) || !mesh.isVerticesDataPresent(BABYLON.VertexBuffer.NormalKind) || !mesh.isVerticesDataPresent(BABYLON.VertexBuffer.UVKind)) {
            alert("Cannot call applyDisplacementMap: Given mesh is not complete. Position, Normal or UV are missing");
            return mesh;
        }

        const positions = mesh.getVerticesData(BABYLON.VertexBuffer.PositionKind, true, true);
        const normals = mesh.getVerticesData(BABYLON.VertexBuffer.NormalKind);
        const uvs = mesh.getVerticesData(BABYLON.VertexBuffer.UVKind);

        let position = BABYLON.Vector3.Zero();
        const normal = BABYLON.Vector3.Zero();
        const uv = BABYLON.Vector2.Zero();

        uvOffset = uvOffset || BABYLON.Vector2.Zero();
        uvScale = uvScale || new BABYLON.Vector2(1, 1);

        for (let index = 0; index < positions.length; index += 3) {
            BABYLON.Vector3.FromArrayToRef(positions, index, position);
            BABYLON.Vector3.FromArrayToRef(normals, index, normal);
            BABYLON.Vector2.FromArrayToRef(uvs, (index / 3) * 2, uv);

            // Compute height
            const u = (Math.abs(uv.x * uvScale.x + (uvOffset.x % 1)) * (heightMapWidth - 1)) % heightMapWidth | 0;
            const v = (Math.abs(uv.y * uvScale.y + (uvOffset.y % 1)) * (heightMapHeight - 1)) % heightMapHeight | 0;

            const pos = (u + v * heightMapWidth) * 4;
            const r = buffer[pos] / 255.0;
            const g = buffer[pos + 1] / 255.0;
            const b = buffer[pos + 2] / 255.0;
            const a = buffer[pos + 3] / 255.0;

            const gradient = r * 0.33 + g * 0.33 + b * 0.33;
            //const gradient = a;

            normal.normalize();
            normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);
            position = position.add(normal);

            position.toArray(positions, index);
        }

        mesh.setVerticesData(BABYLON.VertexBuffer.PositionKind, positions);
        return mesh;
    }


function optimize() {
  var options = new BABYLON.SceneOptimizerOptions(25);
  var optimizer = new BABYLON.SceneOptimizer(scene, options);
  optimizer.onSuccessObservable.add(function() {
    alert('ok');
  });
  optimizer.onNewOptimizationAppliedObservable.add(function (optim) {
    alert(optim.getDescription());
  });
  optimizer.onFailureObservable.add(function() {
    alert('slow');
  });
  optimizer.start();
}


function snapshot() {
    screenshot = true;
BABYLON.Engine.LastCreatedScene.getEngine().onEndFrameObservable.add(function() {
    if (screenshot === true) {
    screenshot = false;
    try {
BABYLON.Tools.CreateScreenshotUsingRenderTarget(BABYLON.Engine.LastCreatedScene.getEngine(), BABYLON.Engine.LastCreatedScene.activeCamera, 
        { precision: 1.0 }, (durl) => { 
             var cnvs = document.getElementById("renderCanvas"); //.getContext("webgl2");
             var svgd = `<svg id="svg_out" viewBox="0 0 ` + cnvs.width + ` ` + cnvs.height + `" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <defs>
                            <filter id="blur" x="0" y="0" xmlns="http://www.w3.org/2000/svg">
                              <feGaussianBlur in="SourceGraphic" stdDeviation="` + BABYLON.Engine.LastCreatedScene.meshes[parseInt(document.getElementById('fnum').value)].material.pointSize/2.0*Math.sqrt(2.0) + `" />
                            </filter>
                          </defs>
                          <image filter="url(#blur)" id="svg_img" x="0" y="0" width="` + cnvs.width + `" height="` + cnvs.height + `" xlink:href=\"` + durl + `\"/>
                        </svg>`;
                        document.getElementById("cnv_out").width = cnvs.width;
                        document.getElementById("cnv_out").height = cnvs.height;
                        document.getElementById("img_out").src = "data:image/svg+xml;base64," + btoa(svgd);        
                      }
                    );
                  } catch(e) { alert(e); }
                  // https://forum.babylonjs.com/t/best-way-to-save-to-jpeg-snapshots-of-scene/17663/11
                }
          });
}


function record_video() {
  try {
  if (BABYLON.VideoRecorder.IsSupported(engine) && (recorder == null || !recorder.isRecording) ) {
    if (recorder == null) {
        recorder = new BABYLON.VideoRecorder(engine, { mimeType:'video/mp4', fps:25, audioTracks: mediaStreamDestination.stream.getAudioTracks() });
    }
    recorder.startRecording('video.mp4', 60*60);
  }
  } catch(e) {alert(e);}
}


function stop_recording() {
  if (recorder.isRecording) {
    recorder.stopRecording();
  }
}


         function setTime(j) {
                 t = Date.now() - start;
                 d = new Date(t + o);
                 let h = addZeros(d.getHours(), 1);
                 let m = addZeros(d.getMinutes(), 1);
                 let s = addZeros(d.getSeconds(), 1);
                 let ms = addZeros(d.getMilliseconds(), 2);
                 let time = h + ":" + m + ":" + s + "." + ms;

                 times.value += time_old + ' --> ' + time + ' ' + ((t-t_old)/1000).toFixed(3) + ' ' + avg[j-1] + ' ' + avg[j] + '\n\n';
                 t_old = t;
                 time_old = time;
                 avg_old = j;
         }


         function addZeros(q, n) {
             var k = 0;
             while (k < n) {
                 if (q < Math.pow(10,n)) {
                     q = "0" + q;
                 }
                 k++;
             }
             return q;
         }
        
        
        //https://stackoverflow.com/questions/39610163/whats-the-benefit-of-webvtt-vtt-over-subreal-srt
         function addTimes() {
             var times_a = times.value.split('\n\n');
             var subs_a = subs.value.split('\n\n');
             for (var i=0; i<subs_a.length; i++) {
                 subs_a[i] = times_a[i] + '\n' + subs_a[i];
             }
             const v = subs_a.join('\n\n');
             subs_link.href = "data:text/vtt;base64," + btoa( v.slice(v.indexOf('WEBVTT\n\n')) );
             subs_link.download = 'subtitles.vtt';
             subs_link.click();
         }
        
        function scrollSubs(s) {
            if (s === true) {
                subs.scrollTo(0, times.scrollTop);
            } else {
                times.scrollTo(0, subs.scrollTop);
            }
        }
            
</script>
</body>
</html>